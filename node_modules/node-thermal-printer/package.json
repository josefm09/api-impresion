{
  "_args": [
    [
      {
        "raw": "node-thermal-printer@^2.0.0",
        "scope": null,
        "escapedName": "node-thermal-printer",
        "name": "node-thermal-printer",
        "rawSpec": "^2.0.0",
        "spec": ">=2.0.0 <3.0.0",
        "type": "range"
      },
      "/home/jose/Proyectos/api-impresion"
    ]
  ],
  "_from": "node-thermal-printer@>=2.0.0 <3.0.0",
  "_id": "node-thermal-printer@2.0.0",
  "_inCache": true,
  "_location": "/node-thermal-printer",
  "_nodeVersion": "8.4.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/node-thermal-printer-2.0.0.tgz_1511971339109_0.6195333271753043"
  },
  "_npmUser": {
    "name": "klemen1337",
    "email": "klemen.kast@gmail.com"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-thermal-printer@^2.0.0",
    "scope": null,
    "escapedName": "node-thermal-printer",
    "name": "node-thermal-printer",
    "rawSpec": "^2.0.0",
    "spec": ">=2.0.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/node-thermal-printer/-/node-thermal-printer-2.0.0.tgz",
  "_shasum": "5c198cf10d9654a3e8fdcce7c4da54c85438a475",
  "_shrinkwrap": null,
  "_spec": "node-thermal-printer@^2.0.0",
  "_where": "/home/jose/Proyectos/api-impresion",
  "author": {
    "name": "Klemen Kastelic",
    "email": "klemen.kast@gmail.com",
    "url": "http://kastelic.net/"
  },
  "bugs": {
    "url": "https://github.com/Klemen1337/node-thermal-printer/issues"
  },
  "dependencies": {
    "net": "^1.0.2",
    "pngjs": "^3.2.0",
    "unorm": "^1.4.1",
    "write-file-queue": "0.0.1"
  },
  "description": "Made to work with Epson and Star thermal printers",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-2aAyUDctMlEAH8KaVOcUIq/qBxeIQSjgt04BGim4MXlSntPdwIgWXwAbCJNMMth3k+8zTlcF+jOMGZ1197ek0A==",
    "shasum": "5c198cf10d9654a3e8fdcce7c4da54c85438a475",
    "tarball": "https://registry.npmjs.org/node-thermal-printer/-/node-thermal-printer-2.0.0.tgz"
  },
  "gitHead": "0fe595400b18a4c743930791efaf7c20cbe71f51",
  "homepage": "https://github.com/Klemen1337/node-thermal-printer",
  "keywords": [
    "thermal",
    "printer",
    "epson",
    "star"
  ],
  "license": "ISC",
  "main": "node-thermal-printer.js",
  "maintainers": [
    {
      "name": "klemen1337",
      "email": "klemen.kast@gmail.com"
    },
    {
      "name": "msirok",
      "email": "m.sirok@gmail.com"
    }
  ],
  "name": "node-thermal-printer",
  "optionalDependencies": {},
  "readme": "# node-thermal-printer\nNode.js module for EPSON and STAR thermal printers command line printing.\n\n[![Join the chat at https://gitter.im/Klemen1337/node-thermal-printer](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/Klemen1337/node-thermal-printer?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n\n### Installation\n```bash\n$ npm install node-thermal-printer\n```\n\n\n#### Linux specific\nLinux requires build-essentials\n```bash\nsudo apt-get install build-essential\n```\n\n\n\n### Features\n```js\nprinter.init({\n  type: 'star',                                     // Printer type: 'star' or 'epson'\n  interface: '/dev/usb/lp0',                        // Printer interface\n  characterSet: 'SLOVENIA',                         // Printer character set\n  removeSpecialCharacters: false,                   // Removes special characters - default: false\n  replaceSpecialCharacters: true,                   // Replaces special characters listed in config files - default: true\n  extraSpecialCharacters:{'Â£':163}                  // Adds additional special characters to those listed in the config files\n});\n\nprinter.isPrinterConnected( function(isConnected){ } )     // Check if printer is connected, callback passes bool of status\nprinter.execute( function(err){ } );                       // Executes all the commands. Optional callback returns null if no error, else error message\nprinter.raw(new Buffer(\"Hello world\"), function(err){ } ); // Print instantly. Optional callback returns null if no error, else error message\nprinter.print(\"Hello World\");                              // Append text\nprinter.println(\"Hello World\");                            // Append text with new line\nprinter.openCashDrawer();                                  // Kick the cash drawer\nprinter.cut();                                             // Cuts the paper (if printer only supports one mode use this)\nprinter.partialCut();                                      // Cuts the paper leaving a small bridge in middle (if printer supports multiple cut modes)\nprinter.beep();                                            // Sound internal beeper/buzzer (if available)\nprinter.upsideDown(true);                                  // Content is printed upside down (rotated 180 degrees)\n\nprinter.bold(true);                                 // Set text bold\nprinter.invert(true);                               // Background/text color inversion\nprinter.underline(true);                            // Underline text (1 dot thickness)\nprinter.underlineThick(true);                       // Underline text with thick line (2 dot thickness)\nprinter.drawLine();                                 // Draws a line\nprinter.newLine();                                  // Insers break line\n\nprinter.alignCenter();                              // Align text to center\nprinter.alignLeft();                                // Align text to left\nprinter.alignRight();                               // Align text to right\n\nprinter.setTypeFontA();                             // Set font type to A (default)\nprinter.setTypeFontB();                             // Set font type to B\n\nprinter.setTextNormal();                            // Set text to normal\nprinter.setTextDoubleHeight();                      // Set text to double height\nprinter.setTextDoubleWidth();                       // Set text to double width\nprinter.setTextQuadArea();                          // Set text to quad area\n\nprinter.leftRight(\"Left\", \"Right\");                 // Prints text left and right\nprinter.table([\"One\", \"Two\", \"Three\"]);             // Prints table equaly\nprinter.tableCustom([                               // Prints table with custom settings (text, align, width, bold)\n  { text:\"Left\", align:\"LEFT\", width:0.5 },\n  { text:\"Center\", align:\"CENTER\", width:0.25, bold:true },\n  { text:\"Right\", align:\"RIGHT\", width:0.25 }\n]);\n\nprinter.code128(\"Code128\");                         // Print code128 bar code\nprinter.printQR(\"https://github.com/Klemen1337/node-thermal-printer\"); // Print QR code\nprinter.printImage('./assets/olaii-logo-black.png', function(done){ }); // Print PNG image (uses callback)\n\nprint.clear();                                      // Clears printText value\nprint.getText();                                    // Returns printer buffer string value\nprint.getBuffer();                                  // Returns printer buffer\nprint.getWidth();                                   // Get number of characters in one line\n```\n\n### Interace options\n- `tcp://192.168.0.99:9100` - network printer with port\n- `printer:auto` - auto select raw system printer via [Printer](https://www.npmjs.com/package/printer) or [Electron printer](https://www.npmjs.com/package/electron-printer) module\n- `printer:My Printer Name` - select system printer by name via [Printer](https://www.npmjs.com/package/printer) or [Electron printer](https://www.npmjs.com/package/electron-printer) module module\n- `\\\\.\\COM1` - print via local port or file\n\n\n### Examples\n```js\nvar printer = require(\"node-thermal-printer\");\nprinter.init({\n  type: 'epson',\n  interface: '/dev/usb/lp0'\n});\nprinter.alignCenter();\nprinter.println(\"Hello world\");\nprinter.printImageBuffer(/* PNG image buffer */, function(done){})\nprinter.printImage('./assets/olaii-logo-black.png', function(done){\n  printer.cut();\n  printer.execute(function(err){\n    if (err) {\n      console.error(\"Print failed\", err);\n    } else {\n     console.log(\"Print done\");\n    }\n  });\n});\n```\n\n### 2D Barcode Examples\nExample settings are the default when not specified.\n\n```js\nprinter.code128(\"Code128\", {\n    width: \"LARGE\",          // \"SMALL\", \"MEDIUM\", \"LARGE\",\n    height: 80,              // 50 < x < 80\n    text: 2,                 // 1 - No text\n                             // 2 - Text on bottom\n                             // 3 - No text inline\n                             // 4 - Text on bottom inline\n});\n\nprinter.printQR(\"QR Code\", {\n    cellSize: 3,             // 1 - 8\n    correction: 'M',         // L(7%), M(15%), Q(25%), H(30%)\n    model: 2,                // 1 - Model 1\n                             // 2 - Model 2 (standard)\n                             // 3 - Micro QR\n});\n\nprinter.pdf417(\"PDF417\", {\n    rowHeight: 3,            // 2 - 8\n    width: 3,                // 2 - 8\n    correction: 1,           // Ratio: 1 - 40\n    truncated: false,        // boolean\n    columns: 0               // 1 - 30, 0 auto\n});\n\nprinter.maxiCode(\"MaxiCode\", {\n    mode: 4,                 // 2 - Formatted/structured Carrier Message (US)\n                             // 3 - Formatted/structured Carrier Message (International)\n                             // 4 - Unformatted data with Standard Error Correction.\n                             // 5 - Unformatted data with Enhanced Error Correction.\n                             // 6 - For programming hardware devices.\n});\n```\n\n### 1D Barcode Example\n```js\nvar data = \"GS1-128\"     // Barcode data (string or buffer)\nvar type = 74            // Barcode type (See Reference)\nvar settings = {         // Optional Settings\n  hriPos: 0,             // Human readable character 0 - 3 (none, top, bottom, both)\n  hriFont: 0,            // Human readable character font\n  width: 3,              // Barcode width\n  height: 168            // Barcode height\n}\n\nprinter.printBarcode(data, type, settings);\n```\n\n### Epson Barcode Reference\n\n|  # | Type                         | Possible Characters                                                                      | Length of Data         |\n|:--:|------------------------------|------------------------------------------------------------------------------------------|------------------------|\n| 65 | UPC-A                        | 0 - 9                                                                                    | 11, 12                 |\n| 66 | UPC-E                        | 0 - 9                                                                                    | 6 â 8, 11, 12          |\n| 67 | JAN13                        | 0 - 9                                                                                    | 12, 13                 |\n| 68 | JAN8                         | 0 - 9                                                                                    | 7, 8                   |\n| 69 | Code39                       | 0 â 9, A â Z, SP, $, %, *, +, -, ., /                                                    | 1 â 255                |\n| 70 | ITF (Interleaved 2 of 5)     | 0 â 9                                                                                    | 2 â 254  (even number) |\n| 71 | CODABAR  (NW-7)              | 0 â 9, A â D, a â d, $, +, â, ., /, :                                                    | 2 â 255                |\n| 72 | CODE93                       | 00h â 7Fh                                                                                | 1 â 255                |\n| 73 | CODE128                      | 00h â 7Fh                                                                                | 2 - 255                |\n| 74 | GS1-128                      | NUL â SP(7Fh)                                                                            | 2 â 255                |\n| 75 | GS1 DataBar  Omnidirectional | 0 â 9                                                                                    | 13                     |\n| 76 | GS1 DataBar  Truncated       | 0 â 9                                                                                    | 13                     |\n| 77 | GS1 DataBar  Limited         | 0 â 9                                                                                    | 13                     |\n| 78 | GS1 DataBar  Expanded        | 0 â 9, A â D, a â d, SP, !,  \", %, $, ', (, ), *, +, ,, -, .,  /, :, ;, <, =, >, ?, _, { | 2 - 255                |\n\n\n### Usage Tips\n`characterSet` may be configured with `\"raw\"`, so no replacement is done at all.\n\n\n### Docs\n- STAR: http://www.starmicronics.com/support/mannualfolder/starline_cm_rev1.15_en.pdf\n- EPSON: https://reference.epson-biz.com/modules/ref_escpos/index.php\n\n\n### Tested printers:\n- Star TSP700\n- Rongta RP80US\n- EPSON TM-T88V\n- Posman BTP-R880NP (Type \"epson\")\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Klemen1337/node-thermal-printer.git"
  },
  "version": "2.0.0"
}
